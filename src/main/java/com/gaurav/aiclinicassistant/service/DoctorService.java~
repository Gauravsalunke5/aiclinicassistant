package com.gaurav.aiclinicassistant.service;

import com.gaurav.aiclinicassistant.model.Doctor;
import com.gaurav.aiclinicassistant.repository.DoctorRepository;
import dev.langchain4j.agent.tool.Tool;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.lang.invoke.MethodHandles;
import java.util.*;

@Service
@AllArgsConstructor
public class DoctorService {
    private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

    private DoctorRepository doctorRepository;

    // Static map for issue-to-specialty
    private static final Map<String, String> issueToSpecialtyMap = Map.of(
            "stomach pain", "Gastroenterology",
            "vision problems", "Ophthalmology",
            "back pain", "Orthopedics",
            "headache", "Neurology",
            "chest pain", "Cardiology",
            "cough", "Pulmonology",
            "fever", "General Medicine",
            "skin rash", "Dermatology",
            "joint pain", "Rheumatology"
    );

    @Tool
    public List<Doctor> recommendDoctors(String issue) {
        String specialty = issueToSpecialtyMap.get(issue.toLowerCase());
        log.info("Recommending doctors for issue='{}', matched specialty='{}'", issue, specialty);

        if (specialty != null) {
            return doctorRepository.findBySpecialty(specialty);
        } else {
            log.warn("No matching specialty found for issue='{}'", issue);
            return List.of();
        }
    }

    @Tool
    public List<Doctor> getDoctorsBySpecialty(String specialty) {
        log.info("Fetching doctors by specialty='{}'", specialty);
        return doctorRepository.findBySpecialty(specialty);
    }

    @Tool
    public String getDoctorSchedule(String firstName) {
        log.info("Fetching schedule for doctor='{}'", firstName);
        List<Doctor> doctor = doctorRepository.findByFirstName(firstName);
        return doctor.get(0).getDaysAvailable().toString();
    }

    public Optional<Doctor> getDoctorById(UUID doctorId) {
        log.info("Fetching doctor with ID={}", doctorId);
        return doctorRepository.findById(doctorId);
    }

    public Doctor saveDoctor(Doctor doctor) {
        log.info("Saving doctor: {}", doctor.getFirstName() + " " + doctor.getLastName());
        return doctorRepository.save(doctor);
    }


    public List<Doctor> getDoctorsByName(String firstName, String lastName) {
        log.info("Fetching doctor by first name='{}', last name='{}'", firstName, lastName);
        if (firstName != null && lastName != null) {
            return doctorRepository.findByFirstNameAndLastName(firstName, lastName);
        } else if (firstName != null) {
            return doctorRepository.findByFirstName(firstName);
        } else if (lastName != null) {
            return doctorRepository.findByLastName(lastName);
        } else {
            return List.of();
        }
    }
}
